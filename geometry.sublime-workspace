{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"su",
				"subset_count"
			],
			[
				"s",
				"set"
			],
			[
				"e",
				"efree"
			],
			[
				"l",
				"last"
			],
			[
				"RE",
				"RETURN_NULL"
			],
			[
				"point_",
				"point_time"
			],
			[
				"n",
				"next"
			],
			[
				"po",
				"point_time"
			],
			[
				"m",
				"month"
			],
			[
				"next",
				"next_point_date"
			],
			[
				"ne",
				"next_point"
			],
			[
				"coo",
				"coordinate"
			],
			[
				"at",
				"altitude_mode"
			],
			[
				"la",
				"last_subset"
			],
			[
				"subset",
				"free_subset"
			],
			[
				"coor",
				"coordinate_subset"
			],
			[
				"t",
				"timestamp"
			],
			[
				"de",
				"delta"
			],
			[
				"min",
				"min_climb_rate"
			],
			[
				"climb",
				"climb_rate"
			],
			[
				"c",
				"current"
			],
			[
				"co",
				"coordinate"
			],
			[
				"coord",
				"coordinate"
			],
			[
				"style",
				"styleUrl"
			],
			[
				"fi",
				"first"
			],
			[
				"in",
				"intern"
			],
			[
				"track",
				"track_point"
			],
			[
				"p",
				"points"
			],
			[
				"si",
				"size"
			],
			[
				"an",
				"angularDistance"
			],
			[
				"b",
				"bearing"
			],
			[
				"str_r",
				"str_replace"
			],
			[
				"lng",
				"lng_string"
			],
			[
				"lat",
				"lat_string"
			],
			[
				"cood",
				"coordinate"
			],
			[
				"part",
				"part_count"
			],
			[
				"set",
				"set_2"
			],
			[
				"tas",
				"tasks_info"
			],
			[
				"tasks",
				"tasks_info"
			],
			[
				"tr",
				"triangle"
			],
			[
				"f",
				"final"
			],
			[
				"las",
				"last_subset"
			],
			[
				"formatter_kml",
				"formatter_kml_split"
			],
			[
				"ou",
				"output"
			],
			[
				"out",
				"output"
			],
			[
				"poin",
				"point_data"
			],
			[
				"erro",
				"error2"
			],
			[
				"er",
				"error"
			],
			[
				"jso",
				"json_integer"
			],
			[
				"json",
				"json_object"
			],
			[
				"time",
				"timestamp"
			],
			[
				"ret",
				"return"
			],
			[
				"i",
				"intern"
			],
			[
				"RETURN",
				"RETURN_STRING"
			],
			[
				"RUTR",
				"RETURN_DOUBLE"
			],
			[
				"sub",
				"subset_count"
			],
			[
				"first",
				"first_subset"
			],
			[
				"free",
				"free_subset"
			],
			[
				"coodinate_s",
				"coordinate_subset"
			],
			[
				"coordinate_s",
				"coordinate_subset"
			],
			[
				"firs",
				"first_subset"
			],
			[
				"ti",
				"time_detla"
			],
			[
				"bu",
				"buffer_size"
			],
			[
				"o",
				"open_distance"
			],
			[
				"task",
				"task"
			],
			[
				"int",
				"intern"
			],
			[
				"di",
				"distance_s"
			],
			[
				"get_ta",
				"get_task_generic"
			],
			[
				"dist",
				"distance_s"
			],
			[
				"str",
				"string"
			],
			[
				"u",
				"used_size"
			],
			[
				"tot",
				"total_distance_s"
			],
			[
				"fo",
				"format_task_point"
			],
			[
				"open",
				"open_distance"
			],
			[
				"pre",
				"pres"
			],
			[
				"mi",
				"min_ele"
			],
			[
				"ma",
				"max_ele"
			],
			[
				"ln",
				"length"
			],
			[
				"ta",
				"task"
			],
			[
				"kml",
				"kml_formatter"
			],
			[
				"st",
				"start_coordinate"
			],
			[
				"poi",
				"point"
			],
			[
				"size",
				"real_size"
			],
			[
				"bes",
				"bestFwrd_index"
			],
			[
				"bestBac",
				"bestBack_index"
			],
			[
				"best",
				"bestBack"
			],
			[
				"be",
				"bestFwrd"
			],
			[
				"pf",
				"printf	printf …"
			],
			[
				"pr",
				"printf	printf …"
			],
			[
				"match",
				"match_h_record"
			],
			[
				"center",
				"center_coordinate"
			],
			[
				"cu",
				"current"
			],
			[
				"coo_",
				"coordinate_set"
			],
			[
				"cone",
				"clone_coordinate_object"
			],
			[
				"g",
				"gridref"
			],
			[
				"os",
				"osgb36"
			],
			[
				"le",
				"letter2"
			],
			[
				"re",
				"return_intern"
			],
			[
				"get_",
				"get_distance"
			],
			[
				"pi",
				"point1"
			],
			[
				"pass",
				"pass_fail"
			],
			[
				"for",
				"foreach	foreach …"
			],
			[
				"max",
				"maxB"
			],
			[
				"end",
				"endF"
			],
			[
				"mid",
				"midF"
			],
			[
				"bestW",
				"bestFwrd_index"
			],
			[
				"dis",
				"distance_map_object"
			],
			[
				"rel",
				"real_size"
			],
			[
				"distan",
				"distance_map_object"
			],
			[
				"ce",
				"center"
			],
			[
				"d",
				"delta"
			],
			[
				"new",
				"new_time"
			],
			[
				"fun",
				"function"
			],
			[
				"of",
				"offset1"
			],
			[
				"map",
				"map_2"
			],
			[
				"off",
				"offset"
			],
			[
				"th",
				"this"
			],
			[
				"trac",
				"track_points"
			],
			[
				"get_d",
				"get_distance"
			],
			[
				"cl",
				"climb_rate"
			],
			[
				"par",
				"parser"
			],
			[
				"tie",
				"timestamp"
			],
			[
				"mem",
				"memcpy"
			],
			[
				"do",
				"double"
			],
			[
				"pri",
				"print_r"
			],
			[
				"parse",
				"parse_igc"
			],
			[
				"cont",
				"count"
			],
			[
				"ch",
				"current_char"
			]
		]
	},
	"buffers":
	[
		{
			"file": "/A/uknxcl/web/.core/classes/kml.php",
			"settings":
			{
				"buffer_size": 6162,
				"line_ending": "Unix"
			}
		},
		{
			"file": "formatter/formatter_kml_earth.c",
			"settings":
			{
				"buffer_size": 23381,
				"line_ending": "Windows"
			}
		},
		{
			"file": "formatter/formatter_js.c",
			"settings":
			{
				"buffer_size": 7600,
				"line_ending": "Windows"
			}
		},
		{
			"file": "test/test1.igc",
			"settings":
			{
				"buffer_size": 43846,
				"line_ending": "Windows"
			}
		},
		{
			"file": "bin/rebuild.sh",
			"settings":
			{
				"buffer_size": 126,
				"line_ending": "Unix"
			}
		},
		{
			"file": "test/test.php",
			"settings":
			{
				"buffer_size": 8241,
				"line_ending": "Unix"
			}
		},
		{
			"file": "test/test1_earth.kml",
			"settings":
			{
				"buffer_size": 584559,
				"line_ending": "Unix"
			}
		},
		{
			"file": "test/php.log",
			"settings":
			{
				"buffer_size": 23338,
				"line_ending": "Unix"
			}
		},
		{
			"file": "coordinate.c",
			"settings":
			{
				"buffer_size": 9023,
				"line_ending": "Unix"
			}
		},
		{
			"file": "coordinate_set.c",
			"settings":
			{
				"buffer_size": 18907,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "Searching 3464 files for \"coordinate_object\"\n\nUnable to open A:\\extensions\\coordinate\\config.h.in\nA:\\extensions\\coordinate\\coordinate.c:\n   10      INIT_CLASS_ENTRY(ce, \"coordinate\", coordinate_methods);\n   11      coordinate_ce = zend_register_internal_class(&ce TSRMLS_CC);\n   12:     coordinate_ce->create_object = create_coordinate_object;\n   13  }\n   14  \n   15: zend_object_value create_coordinate_object(zend_class_entry *class_type TSRMLS_DC) {\n   16      zend_object_value retval;\n   17  \n   18:     coordinate_object *intern = emalloc(sizeof(coordinate_object));\n   19:     memset(intern, 0, sizeof(coordinate_object));\n   20  \n   21      zend_object_std_init(&intern->std, class_type TSRMLS_CC);\n   22      object_properties_init(&intern->std, class_type);\n   23  \n   24:     retval.handle = zend_objects_store_put(intern, (zend_objects_store_dtor_t) zend_objects_destroy_object,  (zend_objects_free_object_storage_t)free_coordinate_object, NULL TSRMLS_CC);\n   25      retval.handlers = zend_get_std_object_handlers();\n   26  \n   27      return retval;\n   28  }\n   29: void _free_coordinate_object(coordinate_object *intern) {\n   30      if(intern->prev) {\n   31          intern->prev->next = intern->next;\n   ..\n   37  }\n   38  \n   39: void free_coordinate_object(coordinate_object *intern TSRMLS_DC) {\n   40      zend_object_std_dtor(&intern->std TSRMLS_CC);\n   41:     _free_coordinate_object(intern);\n   42  }\n   43  \n   ..\n   68      }\n   69  \n   70:     coordinate_object *intern = zend_object_store_get_object(getThis() TSRMLS_CC);\n   71      intern->lat = lat;\n   72      intern->lng = lng;\n   ..\n   77  \n   78  PHP_METHOD(coordinate, id) {\n   79:     coordinate_object *intern = zend_object_store_get_object(getThis() TSRMLS_CC);\n   80      RETURN_LONG(intern->id);\n   81  }\n   ..\n   87      }\n   88  \n   89:     coordinate_object *intern = zend_object_store_get_object(getThis() TSRMLS_CC);\n   90      if (as_rad) {\n   91          RETURN_DOUBLE(intern->lat toRAD);\n   ..\n   96  \n   97  PHP_METHOD(coordinate, gridref) {\n   98:     coordinate_object *intern = zend_object_store_get_object(getThis() TSRMLS_CC);\n   99      RETURN_STRING(get_os_grid_ref(intern), 0);\n  100  }\n  101  \n  102  PHP_METHOD(coordinate, timestamp) {\n  103:     coordinate_object *intern = zend_object_store_get_object(getThis() TSRMLS_CC);\n  104      RETURN_LONG(intern->timestamp);\n  105  }\n  ...\n  111      }\n  112  \n  113:     coordinate_object *intern = zend_object_store_get_object(getThis() TSRMLS_CC);\n  114      if (as_rad) {\n  115          RETURN_DOUBLE(intern->lng toRAD);\n  ...\n  120  \n  121  PHP_METHOD(coordinate, ele) {\n  122:     coordinate_object *intern = zend_object_store_get_object(getThis() TSRMLS_CC);\n  123      RETURN_DOUBLE(intern->ele);\n  124  }\n  ...\n  129          return;\n  130      }\n  131:     coordinate_object *intern = zend_object_store_get_object(getThis() TSRMLS_CC);\n  132      intern->ele = val;\n  133  }\n  ...\n  138          return;\n  139      }\n  140:     coordinate_object *intern = zend_object_store_get_object(getThis() TSRMLS_CC);\n  141      intern->lng = val;\n  142  }\n  ...\n  147          return;\n  148      }\n  149:     coordinate_object *intern = zend_object_store_get_object(getThis() TSRMLS_CC);\n  150      intern->lat = val;\n  151  }\n  ...\n  157      }\n  158  \n  159:     coordinate_object *point1 = zend_object_store_get_object(getThis() TSRMLS_CC);\n  160:     coordinate_object *point2 = zend_object_store_get_object(_point TSRMLS_CC);\n  161  \n  162      RETURN_DOUBLE(get_bearing(point1, point2));\n  ...\n  171      }\n  172  \n  173:     coordinate_object *point1 = zend_object_store_get_object(getThis() TSRMLS_CC);\n  174:     coordinate_object *point2 = zend_object_store_get_object(_point TSRMLS_CC);\n  175  \n  176      if (precise) {\n  ...\n  181  }\n  182  \n  183: double get_bearing(coordinate_object *obj1, coordinate_object *obj2) {\n  184      double lat1 = obj1->lat toRAD, lng1 = obj1->lng toRAD;\n  185      double lat2 = obj2->lat toRAD, lng2 = obj2->lng toRAD;\n  ...\n  195  }\n  196  \n  197: double get_distance(coordinate_object *point1, coordinate_object *point2) {\n  198  \n  199      double sin_lat_1 = 0;\n  ...\n  212  }\n  213  \n  214: double get_distance_precise(coordinate_object *obj1, coordinate_object *obj2) {\n  215      double lat1 = obj1->lat toRAD, lng1 = obj1->lng toRAD;\n  216      double lat2 = obj2->lat toRAD, lng2 = obj2->lng toRAD;\n  ...\n  253  }\n  254  \n  255: char *coordinate_to_kml(coordinate_object *coordinate) {\n  256      char *buffer = create_buffer(\"\");\n  257      char *lat = fdtos(coordinate->lat, \"%.5f\");\n\nA:\\extensions\\coordinate\\coordinate.h:\n   20  PHP_METHOD(coordinate, __construct);\n   21  \n   22: typedef struct coordinate_object {\n   23      // required\n   24      zend_object std;\n   ..\n   34      double speed;\n   35      double bearing;\n   36:     struct coordinate_object *prev;\n   37:     struct coordinate_object *next;\n   38: } coordinate_object;\n   39  \n   40  zend_class_entry *coordinate_ce;\n   41  static zend_function_entry coordinate_methods[];\n   42  \n   43: zend_object_value create_coordinate_object(zend_class_entry *class_type TSRMLS_DC);\n   44: void free_coordinate_object(coordinate_object *intern TSRMLS_DC);\n   45: void _free_coordinate_object(coordinate_object *intern);\n   46  \n   47  #endif\n   ..\n   50  #define toDEG * 180 / M_PI\n   51  \n   52: double get_distance(coordinate_object *point1, coordinate_object *point2);\n   53: double get_distance_precise(coordinate_object *point1, coordinate_object *point2);\n   54: double get_bearing(coordinate_object *point1, coordinate_object *point2);\n   55: char *coordinate_to_kml(coordinate_object *coordinate);\n\nA:\\extensions\\coordinate\\coordinate_set.c:\n  108  \n  109      coordinate_set_object *intern = zend_object_store_get_object(getThis() TSRMLS_CC);\n  110:     coordinate_object *coordinate_intern = zend_object_store_get_object(coordinate TSRMLS_CC);\n  111      coordinate_intern->id = intern->length++;\n  112      if (intern->last) {\n  ...\n  122  }\n  123  \n  124: void _clone_coordinate_object(coordinate_object *coordinate, coordinate_object *return_intern) {\n  125      return_intern->lat = coordinate->lat;\n  126      return_intern->lng = coordinate->lng;\n  ...\n  134      MAKE_STD_ZVAL(ret);\n  135      object_init_ex(ret, coordinate_ce);\n  136:     coordinate_object *return_intern = zend_object_store_get_object(ret TSRMLS_CC);\n  137      if (intern->first) {\n  138:         _clone_coordinate_object(intern->first, return_intern);\n  139          RETURN_ZVAL(ret, 0, 0);\n  140      }\n  ...\n  147      MAKE_STD_ZVAL(ret);\n  148      object_init_ex(ret, coordinate_ce);\n  149:     coordinate_object *return_intern = zend_object_store_get_object(ret TSRMLS_CC);\n  150      if (intern->last) {\n  151:         _clone_coordinate_object(intern->last, return_intern);\n  152          RETURN_ZVAL(ret, 0, 0);\n  153      }\n  ...\n  165      object_init_ex(ret, coordinate_ce);\n  166      coordinate_set_object *intern = zend_object_store_get_object(getThis() TSRMLS_CC);\n  167:     coordinate_object *return_intern = zend_object_store_get_object(ret TSRMLS_CC);\n  168:     coordinate_object *coordinate = intern->first;\n  169      int i = 0;\n  170      while (coordinate && ++i < offset) {\n  171          coordinate = coordinate->next;\n  172      }\n  173:     _clone_coordinate_object(coordinate, return_intern);\n  174      RETURN_ZVAL(ret, 0, 0);\n  175  }\n  ...\n  201          set->next->first->prev = set->prev ? set->prev->last : NULL;\n  202      }\n  203:     coordinate_object *tmp, *current = set->first;\n  204      while (current != set->last) {\n  205          tmp = current->next;\n  ...\n  220  \n  221  \n  222: coordinate_subset *create_subset(coordinate_set_object *set, coordinate_object *coordinate) {\n  223      coordinate_subset *subset = emalloc(sizeof(coordinate_subset));\n  224      subset->length = 1;\n  ...\n  245              parse_h_record(intern, curLine);\n  246          } else if (is_b_record(curLine)) {\n  247:             coordinate_object *coordinate = parse_igc_coordiante(curLine);\n  248              coordinate->id = intern->length++;\n  249              coordinate->prev = intern->last;\n  ...\n  271  \n  272  int has_height_data(coordinate_set_object *coordinate_set) {\n  273:     coordinate_object *coordinate = coordinate_set->first;\n  274      while (coordinate) {\n  275          if (coordinate->ele) {\n  ...\n  289      coordinate_set_object *intern = zend_object_store_get_object(getThis() TSRMLS_CC);\n  290      if (intern->first) {\n  291:         coordinate_object *current = intern->first->next;\n  292          while (current) {\n  293              if (current->ele == 0) {\n  ...\n  349      }\n  350      coordinate_set_object *intern = zend_object_store_get_object(getThis() TSRMLS_CC);\n  351:     coordinate_object_set_section(intern, offset);\n  352      RETURN_NULL();\n  353  }\n  354  \n  355: void coordinate_object_set_section(coordinate_set_object *intern, long index) {\n  356      coordinate_subset *current = intern->first_subset;\n  357      coordinate_subset *tmp;\n  ...\n  378  int set_graph_values(coordinate_set_object *intern) {\n  379      if (intern->first) {\n  380:         coordinate_object *current = intern->first->next;\n  381          while (current && current->next) {\n  382              double distance = get_distance(current->next, current->prev);\n  ...\n  397  \n  398  long coordinate_set_simplify(coordinate_set_object *set) {\n  399:     coordinate_object *tmp, *current;\n  400      if (set->first) {\n  401          current = set->first->next;\n  ...\n  405              if (distance < 0.0001) {\n  406                  tmp = current->next;\n  407:                 _free_coordinate_object(current);\n  408                  i++;\n  409                  current = tmp;\n  ...\n  459      intern->max_ele = intern->max_ele = intern->max_alt = intern->min_alt = 0;\n  460      intern->max_climb_rate = intern->min_climb_rate = intern->max_speed = 0;\n  461:     coordinate_object *current = intern->first;\n  462      while (current) {\n  463          // Compare heights with max/min\n  ...\n  521  }\n  522  \n  523: coordinate_object *parse_igc_coordiante(char *line) {\n  524:     coordinate_object *intern = emalloc(sizeof(coordinate_object));\n  525      char *p = line + 1;\n  526      intern->bearing = 0;\n\nA:\\extensions\\coordinate\\coordinate_set.h:\n   25  \n   26  typedef struct coordinate_subset {\n   27:     coordinate_object *first, *last;\n   28      long length;\n   29      struct coordinate_subset *next, *prev;\n   ..\n   33      zend_object std;\n   34  \n   35:     coordinate_object *coordinate, *first, *last;\n   36      long length;\n   37      long offset;\n   ..\n   60  static zend_object_value coordinate_set_object_clone(zval *object TSRMLS_DC);\n   61  \n   62: coordinate_object *match_b_record(char *line);\n   63  int set_graph_values(coordinate_set_object *intern);\n   64  int parse_igc(coordinate_set_object *intern, char *string);\n   65: coordinate_object *parse_igc_coordiante(char *string);\n   66  int is_b_record(char *line);\n   67  int is_h_record(char *line);\n   68  int is_valid_subset(coordinate_subset *start);\n   69: void push_coordinate(coordinate_set_object *set, coordinate_object *coordinate);\n   70  int parse_h_record(coordinate_set_object *coordinate_set, char *line);\n   71  int has_height_data(coordinate_set_object *coordinate_set);\n   72: void clone_coordinate_object(coordinate_object *source, coordinate_object *dest);\n   73: void coordinate_object_trim(coordinate_set_object *source);\n   74  void free_subset(coordinate_set_object *parser, coordinate_subset *subset);\n   75: void coordinate_object_set_section(coordinate_set_object *intern, long index);\n   76  #endif\n\nA:\\extensions\\coordinate\\distance_map.c:\n   96      }\n   97      int j;\n   98:     coordinate_object *coordinate1 = set->first;\n   99      i = 0;\n  100      while (coordinate1) {\n  101          j = i + 1;\n  102:         coordinate_object *coordinate2 = coordinate1->next;\n  103          while (coordinate2) {\n  104              map->distances[i][j - i - 1] = floor(get_distance_precise(coordinate1, coordinate2) * 1000000);\n  ...\n  224          return_intern->size = 5;\n  225          return_intern->type = TRIANGLE;\n  226:         return_intern->coordinate = emalloc(sizeof(coordinate_object *) * 5);\n  227          return_intern->coordinate[0] = get_coordinate(intern, indexes[0]);\n  228          return_intern->coordinate[1] = get_coordinate(intern, indexes[1]);\n  ...\n  268          return_intern->size = 3;\n  269          return_intern->type = OUT_AND_RETURN;\n  270:         return_intern->coordinate = emalloc(sizeof(coordinate_object *) * 3);\n  271          return_intern->coordinate[0] = get_coordinate(intern, indexes[0]);\n  272          return_intern->coordinate[1] = get_coordinate(intern, indexes[1]);\n  ...\n  329          return_intern->size = 5;\n  330          return_intern->type = OPEN_DISTANCE;\n  331:         return_intern->coordinate = emalloc(sizeof(coordinate_object *) * 5);\n  332          return_intern->coordinate[0] = get_coordinate(intern, indexes[0]);\n  333          return_intern->coordinate[1] = get_coordinate(intern, indexes[1]);\n  ...\n  354      }\n  355  \n  356:     coordinate_object *point1 = get_coordinate(intern, offset1);\n  357:     coordinate_object *point2 = get_coordinate(intern, offset2);\n  358      double distance = get_distance_precise(point1, point2);\n  359      RETURN_DOUBLE(distance);\n  ...\n  377  }\n  378  \n  379: coordinate_object *get_coordinate(distance_map_object *map, unsigned long index) {\n  380      int i = 0;\n  381:     coordinate_object *current = map->coordinate_set->first;\n  382      while (i < index) {\n  383          i++;\n\nA:\\extensions\\coordinate\\distance_map.h:\n   32  #define MAP(map, from, to) (from >= to ? 0 : map->distances[from][to - from - 1])\n   33  #define SKIP(map, diff) (floor(diff / map->maximum_distance))\n   34: coordinate_object *get_coordinate(distance_map_object *map, unsigned long index);\n   35  int create_distance_map(distance_map_object *map, coordinate_set_object *set);\n   36  #endif\n\nA:\\extensions\\coordinate\\geometry.c:\n   47  #endif\n   48  \n   49: char *get_os_grid_ref(coordinate_object *point) {\n   50      double lat = point->lat toRAD;\n   51      double lon = point->lng toRAD;\n\nA:\\extensions\\coordinate\\geometry.h:\n    8  PHP_MINIT_FUNCTION(geometry);\n    9  \n   10: char *get_os_grid_ref(coordinate_object *point);\n   11  char *gridref_number_to_letter(long e, long n);\n   12  #endif\n\nA:\\extensions\\coordinate\\helmert.c:\n   34  };\n   35  \n   36: void osgb36_to_wgs84(coordinate_object *point) {\n   37      helmert_trans(point, osgb36, wsg84, osgb36_to_wsg84_transform);\n   38  }\n   39  \n   40: void wgs84_to_osgb36(coordinate_object *point) {\n   41      helmert_trans(point, wsg84, osgb36, wsg84_osgb36_to_transform);\n   42  }\n   43  \n   44: void helmert_trans(coordinate_object *point, const helmert_ellipsoid source_ellipse, const helmert_ellipsoid target_ellipse, const helmert_transform transform) {\n   45      printf(\"%f, %f\\n\", point->lat, point->lng);\n   46      double lat = point->lat;\n\nA:\\extensions\\coordinate\\helmert.h:\n   23  static helmert_transform wsg84_osgb36_to_transform;\n   24  \n   25: void osgb36_to_wgs84(coordinate_object *point);\n   26: void wgs84_to_osgb36(coordinate_object *point);\n   27: void helmert_trans(coordinate_object *point, const helmert_ellipsoid source_ellipse, const helmert_ellipsoid target_ellipse, const helmert_transform transform);\n   28  \n   29  #endif\n\nA:\\extensions\\coordinate\\task.c:\n   63      }\n   64  \n   65:     coordinate_object *coordinate_1, *coordinate_2, *coordinate_3, *coordinate_4, *coordinate_5;\n   66      coordinate_1 = coordinate_zval_1 ? zend_object_store_get_object(coordinate_zval_1 TSRMLS_CC) : NULL;\n   67      coordinate_2 = coordinate_zval_2 ? zend_object_store_get_object(coordinate_zval_2 TSRMLS_CC) : NULL;\n   ..\n   73          intern->type = TRIANGLE;\n   74          intern->size = 4;\n   75:         intern->coordinate = emalloc(sizeof(coordinate_object) * 4);\n   76          intern->coordinate[0] = coordinate_1;\n   77          intern->coordinate[1] = coordinate_2;\n   ..\n   81          intern->type = OUT_AND_RETURN;\n   82          intern->size = 3;\n   83:         intern->coordinate = emalloc(sizeof(coordinate_object) * 3);\n   84          intern->coordinate[0] = coordinate_1;\n   85          intern->coordinate[1] = coordinate_2;\n   ..\n   89          if (coordinate_5) {\n   90              intern->size = 5;\n   91:             intern->coordinate = emalloc(sizeof(coordinate_object) * 5);\n   92              intern->coordinate[0] = coordinate_1;\n   93              intern->coordinate[1] = coordinate_2;\n   ..\n   97          } else if (coordinate_4) {\n   98              intern->size = 4;\n   99:             intern->coordinate = emalloc(sizeof(coordinate_object) * 4);\n  100              intern->coordinate[0] = coordinate_1;\n  101              intern->coordinate[1] = coordinate_2;\n  ...\n  104          } else if (coordinate_3) {\n  105              intern->size = 3;\n  106:             intern->coordinate = emalloc(sizeof(coordinate_object) * 3);\n  107              intern->coordinate[0] = coordinate_1;\n  108              intern->coordinate[1] = coordinate_2;\n  ...\n  110          } else if (coordinate_2) {\n  111              intern->size = 2;\n  112:             intern->coordinate = emalloc(sizeof(coordinate_object) * 2);\n  113              intern->coordinate[0] = coordinate_1;\n  114              intern->coordinate[1] = coordinate_2;\n  ...\n  131  int completes_task(coordinate_set_object *set, task_object *task) {\n  132      int i = 0, j = 0;\n  133:     coordinate_object *task_point;\n  134:     coordinate_object *track_point = set->first;\n  135      start:\n  136      for (i; i < task->size; i++) {\n  ...\n  158  \n  159      for (i; i < intern->size; i++) {\n  160:         coordinate_object *point1 = intern->coordinate[i];\n  161          char coordinate[6];\n  162          sprintf(coordinate, \"%d,\", point1->id + 1);\n  ...\n  183  \n  184      for (i; i < end; i++) {\n  185:         coordinate_object *point1 = intern->coordinate[i];\n  186          char *gridref = get_os_grid_ref(point1);\n  187          coordinates = vstrcat(coordinates, gridref, \";\", NULL);\n  ...\n  190  \n  191      if (intern->type == TRIANGLE) {\n  192:         coordinate_object *point1 = intern->coordinate[1];\n  193          char *gridref = get_os_grid_ref(point1);\n  194          coordinates = vstrcat(coordinates, gridref, \";\", NULL);\n  ...\n  217      double distance = 0;\n  218      for (i; i < end; i++) {\n  219:         coordinate_object *point1 = task->coordinate[i];\n  220:         coordinate_object *point2 = task->coordinate[i + 1];\n  221          distance += get_distance_precise(point1, point2);\n  222      }\n  223      if (task->type == TRIANGLE) {\n  224:         coordinate_object *point1 = task->coordinate[1];\n  225:         coordinate_object *point2 = task->coordinate[3];\n  226          distance += get_distance_precise(point1, point2);\n  227      }\n\nA:\\extensions\\coordinate\\task.h:\n   20      zend_object std;\n   21  \n   22:     coordinate_object **coordinate;\n   23      int size;\n   24      task_type type;\n\nA:\\extensions\\coordinate\\formatter\\formatter_js.c:\n   68  \n   69  json_t *get_bounds(coordinate_set_object *set) {\n   70:     coordinate_object *coordinate = set->first;\n   71      double north = coordinate->lat;\n   72      double south = coordinate->lat;\n   ..\n   93      );\n   94  \n   95:     coordinate_object *se = emalloc(sizeof(coordinate_object));\n   96      se->lat = south;\n   97      se->lng = east;\n   98:     coordinate_object *nw = emalloc(sizeof(coordinate_object));\n   99      nw->lat = north;\n  100      nw->lng = west;\n  ...\n  176      json_t *data = json_array();\n  177      json_t *coordinates = json_array();\n  178:     coordinate_object *coordinate = intern->set->first;\n  179      while (coordinate) {\n  180          json_t *point = json_pack(\"{s:i, s:f, s:f}\", \"ele\", coordinate->ele, \"lat\", coordinate->lat, \"lng\", coordinate->lng);\n\nA:\\extensions\\coordinate\\formatter\\formatter_kml.c:\n   79  char *get_meta_data(formatter_object *intern) {\n   80      char *buffer = create_buffer(\"<Metadata><SecondsFromTimeOfFirstPoint>\");\n   81:     coordinate_object *coordinate = intern->set->first;\n   82      int i = 0;\n   83      while (coordinate) {\n   ..\n   99  	<altitudeMode>absolute</altitudeMode>\\n\\\n  100  	<coordinates>\");\n  101:     coordinate_object *coordinate = intern->set->first;\n  102      int i = 0;\n  103      while (coordinate) {\n  ...\n  114  }\n  115  \n  116: char *format_task_point(coordinate_object *coordinate, int index, coordinate_object *prev, double *total_distance) {\n  117      double distance = 0;\n  118      if (prev) {\n  ...\n  131      char *info = create_buffer(\"\");\n  132      char *coordinates = create_buffer(\"\");\n  133:     coordinate_object *prev = NULL;\n  134      int i;\n  135      for (i = 0; i < task->size; i++) {\n  ...\n  176  }\n  177  \n  178: char *get_circle_coordinates(coordinate_object *coordinate, int radius) {\n  179      double angularDistance = radius / 6378137.0;\n  180      double sin_lat = 0;\n\nA:\\extensions\\coordinate\\formatter\\formatter_kml_earth.c:\n   79  char *get_meta_data_earth(formatter_object *intern) {\n   80      char *buffer = create_buffer(\"<Metadata><SecondsFromTimeOfFirstPoint>\");\n   81:     coordinate_object *coordinate = intern->set->first;\n   82      int i = 0;\n   83      while (coordinate) {\n   ..\n  102  	<altitudeMode>\", altitude_mode, \"</altitudeMode>\\n\\\n  103  	<coordinates>\", NULL);\n  104:     coordinate_object *coordinate = intern->set->first;\n  105      int i = 0;\n  106      while (coordinate) {\n  ...\n  117  }\n  118  \n  119: char *get_partial_linestring_earth(coordinate_object *coordinate, coordinate_object *last, char *style) {\n  120      char *buffer = create_buffer(\"\");\n  121      buffer = vstrcat(buffer, \"\\\n  ...\n  143  }\n  144  \n  145: char *format_task_point_earth(coordinate_object *coordinate, int index, coordinate_object *prev, double *total_distance) {\n  146      double distance = 0;\n  147      if (prev) {\n  ...\n  160      char *info = create_buffer(\"\");\n  161      char *coordinates = create_buffer(\"\");\n  162:     coordinate_object *prev = NULL;\n  163      int i;\n  164      for (i = 0; i < task->size; i++) {\n  ...\n  205  }\n  206  \n  207: char *get_circle_coordinates_earth(coordinate_object *coordinate, int radius) {\n  208      double angularDistance = radius / 6378137.0;\n  209      double sin_lat = 0;\n  ...\n  530      long min = set->min_ele;\n  531      double delta = (set->max_ele - set->min_ele ? : 1) / 16;\n  532:     coordinate_object *last, *first, *current;\n  533      first = current = set->first;\n  534      int last_level, current_level;\n  ...\n  561      long min = set->min_climb_rate;\n  562      double delta = (set->max_climb_rate - set->min_climb_rate ? : 1) / 16;\n  563:     coordinate_object *last, *first, *current;\n  564      first = current = set->first;\n  565      int last_level, current_level;\n  ...\n  593      long min = 0;\n  594      double delta = (set->max_speed ? : 1) / 16;\n  595:     coordinate_object *last, *first, *current;\n  596      first = current = set->first;\n  597      int last_level, current_level;\n  ...\n  638      long min = set->first->timestamp;\n  639      double delta = (set->last->timestamp - min ? : 1) / 16;\n  640:     coordinate_object *current = set->first;\n  641      int current_level;\n  642      char *point, *next_point;\n\nA:\\extensions\\coordinate\\formatter\\formatter_kml_split.c:\n   56      <altitudeMode>absolute</altitudeMode>\\n\\\n   57      <coordinates>\");\n   58:     coordinate_object *coordinate = intern->first;\n   59      int i = 0;\n   60      while (coordinate && coordinate != intern->last) {\n\nUnable to open A:\\uknxcl\\web\\.core\\module\\cms\\scss\\.sass-cache\\ba53a3af6e9448bece5b5f58f766d359fb910d0e\\0_boostrap.scssc\nUnable to open A:\\uknxcl\\web\\.core\\module\\cms\\scss\\.sass-cache\\ba53a3af6e9448bece5b5f58f766d359fb910d0e\\1_variables.scssc\nUnable to open A:\\uknxcl\\web\\.core\\module\\cms\\scss\\.sass-cache\\ba53a3af6e9448bece5b5f58f766d359fb910d0e\\2_bootswatch.scssc\nUnable to open A:\\uknxcl\\web\\.core\\module\\cms\\scss\\.sass-cache\\ba53a3af6e9448bece5b5f58f766d359fb910d0e\\3_cms.scssc\nUnable to open A:\\uknxcl\\web\\.core\\module\\cms\\scss\\.sass-cache\\ba53a3af6e9448bece5b5f58f766d359fb910d0e\\_cms.scssc\n143 matches across 16 files\n",
			"settings":
			{
				"buffer_size": 24411,
				"line_ending": "Windows",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "coordinate_set.h",
			"settings":
			{
				"buffer_size": 2717,
				"line_ending": "Windows"
			}
		},
		{
			"file": "formatter/formatter_kml_earth.h",
			"settings":
			{
				"buffer_size": 970,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/A/uknxcl/web/inc/track/track.php",
			"settings":
			{
				"buffer_size": 15951,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 173.0,
		"selected_items":
		[
			[
				"forma",
				"CodeFormatter: Format as HTML Syntax"
			],
			[
				"format",
				"CodeFormatter: Format as PHP Syntax"
			],
			[
				"packag",
				"Package Control: Install Package"
			],
			[
				"packa",
				"Package Control: Install Package"
			],
			[
				"package",
				"Package Control: Install Package"
			],
			[
				"pkginst",
				"Package Control: Install Package"
			]
		],
		"width": 400.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/A/extensions/coordinate",
		"/A/extensions/coordinate/formatter",
		"/A/extensions/coordinate/test",
		"/A/uknxcl/web",
		"/A/uknxcl/web/.core",
		"/A/uknxcl/web/.core/classes",
		"/A/uknxcl/web/inc",
		"/A/uknxcl/web/inc/track"
	],
	"file_history":
	[
		"/A/extensions/coordinate/coordinate_set.c",
		"/C/Users/rob/Desktop/track_earth.kml",
		"/C/Users/rob/AppData/Roaming/Sublime Text 3/Packages/User/Default (Windows).sublime-keymap",
		"/C/Users/rob/AppData/Roaming/Sublime Text 3/Packages/User/Preferences.sublime-settings",
		"/C/Users/rob/AppData/Roaming/Sublime Text 3/Packages/Default/Preferences.sublime-settings",
		"/A/extensions/coordinate/test1_earth.kml",
		"/A/extensions/coordinate/test/php.log",
		"/A/extensions/coordinate/formatter/formatter_kml_earth.c",
		"/C/Users/rob/PhpstormProjects/extensions/.idea/workspace.xml",
		"/A/extensions/coordinate/test/test.php",
		"/C/Users/rob/.WebIde80/system/LocalHistory/changes.storageData",
		"/A/extensions/coordinate/php.log",
		"/A/uknxcl/web/.git/config",
		"/A/extensions/coordinate/.git/config",
		"/A/extensions/coordinate/geometry.sublime-project",
		"/A/extensions/coordinate/formatter_kml_split.c",
		"/A/extensions/coordinate/formatter_kml.c",
		"/A/extensions/coordinate/formatter_js.c",
		"/A/extensions/coordinate/coordinate.c",
		"/A/extensions/coordinate/coordinate.h",
		"/A/extensions/coordinate/distance_map.c",
		"/A/extensions/coordinate/coordinate_set.h",
		"/A/uknxcl/web/.core/classes/interfaces/geometry.php",
		"/A/uknxcl/web/inc/track/track.php",
		"/A/uknxcl/web/inc/track/defined_task.php",
		"/A/uknxcl/web/inc/module/comps/object/comp.php",
		"/A/uknxcl/web/inc/object/flight.php",
		"/A/extensions/coordinate/test0.kml",
		"/A/extensions/coordinate/task.c",
		"/A/extensions/coordinate/task.h",
		"/A/uknxcl/web/inc/track/track_point.php",
		"/A/uknxcl/web/inc/track/task.php",
		"/A/extensions/coordinate/formatter.h",
		"/A/extensions/coordinate/formatter_kml.h",
		"/A/uknxcl/web/uploads/flight/temp/1415221926/track.kml",
		"/A/uknxcl/web/uploads/flight/temp/1415213834/track.kml",
		"/A/extensions/coordinate/test0.igc",
		"/A/uknxcl/web/uploads/flight/temp/1415212396/track.kml",
		"/A/uknxcl/web/uploads/flight/temp/1415212229/track.kml",
		"/A/extensions/coordinate/geometry.c",
		"/A/extensions/coordinate/config.m4",
		"/A/extensions/coordinate/test.php",
		"/A/extensions/coordinate/test1.igc",
		"/A/extensions/coordinate/formatter_kml_split.h",
		"/A/extensions/coordinate/test7.kml",
		"/A/uknxcl/web/uploads/flight/temp/1415132820/track.kml",
		"/A/extensions/coordinate/json/hashtable_seed.c",
		"/A/extensions/coordinate/json/jansson.h",
		"/A/extensions/coordinate/todo.txt",
		"/A/extensions/coordinate/string_manip.c",
		"/A/extensions/coordinate/string_manip.h",
		"/A/extensions/coordinate/json/utf.c",
		"/A/extensions/coordinate/json/value.c",
		"/A/extensions/coordinate/json/lookup3.h",
		"/A/extensions/coordinate/json/strconv.c",
		"/A/extensions/coordinate/json/utf.h",
		"/A/extensions/coordinate/json/hashtable.c",
		"/A/extensions/coordinate/json/dump.c",
		"/A/extensions/coordinate/json/jansson_private.h",
		"/A/extensions/coordinate/formatter_js.h",
		"/A/extensions/coordinate/json/jannson_private_config.h",
		"/A/extensions/coordinate/json/jansson_config.h",
		"/A/extensions/coordinate/distance_map.lo",
		"/C/Users/rob/AppData/Local/Temp/Rar$DRa0.881/var/www/vhosts/uknxcl/web.dev/uploads/flight/temp/1394225177/track_earth.kml",
		"/A/extensions/coordinate/kml_formatter.h",
		"/A/extensions/coordinate/geometry.h",
		"/A/extensions/coordinate/test1.kml",
		"/A/extensions/coordinate/helmert.h",
		"/C/Users/rob/AppData/Local/Temp/Rar$DRa0.931/var/www/vhosts/uknxcl/web/uploads/flight/temp/1411909744/track.kml",
		"/C/Users/rob/Downloads/9838-Brown_Malcolm-2014-09-07.kml",
		"/A/uknxcl/web/uploads/flight/temp/1411909744/track.kmz",
		"/A/extensions/coordinate/libtool",
		"/A/extensions/coordinate/distance_map.h",
		"/A/extensions/coordinate/rebuild.sh",
		"/A/extensions/coordinate/helmert.c",
		"/A/extensions/coordinate/reload.sh",
		"/A/extensions/coordinate/test3.kml",
		"/A/extensions/coordinate/ltmain.sh",
		"/C/Users/rob/Downloads/2014-09-09_12-14.kml",
		"/C/Users/rob/Downloads/2014-09-17_14-20.kml",
		"/A/extensions/coordinate/config.h.in~",
		"/A/extensions/coordinate/tests/geometry_coordinate_error_0.phpt",
		"/A/extensions/coordinate/geometry_coordinate_0.phpt",
		"/A/extensions/coordinate/geometry_coordinate_error_0.phpt",
		"/A/uknxcl/web/inc/classes/geometry.php",
		"/A/uknxcl/web/inc/classes/lat_lng.php",
		"/A/extensions/coordinate/coordinate_set.lo",
		"/A/uknxcl/web/inc/track/igc_parser.php",
		"/A/extensions/coordinate/test.igc.bak",
		"/A/extensions/coordinate/test.igc",
		"/A/extensions/coordinate/zend.h",
		"/A/extensions/coordinate/parser.c",
		"/A/extensions/coordinate/parser.h",
		"/A/extensions/coordinate/zend_API.h",
		"/A/extensions/coordinate/php.h",
		"/A/extensions/coordinate/aclocal.m4",
		"/A/extensions/coordinate/_latlng.h",
		"/A/extensions/coordinate/_latlng.c",
		"/A/extensions/coordinate/geometry_latlng.c",
		"/A/extensions/coordinate/reload_full.sh",
		"/A/extensions/coordinate/mkinstalldirs",
		"/A/extensions/coordinate/configure",
		"/A/extensions/coordinate/Makefile",
		"/A/uknxcl.old/conf/uknxcl.old.local.com.conf",
		"/C/Users/rob/AppData/Roaming/Sublime Text 3/Packages/Default/Default (Windows).sublime-keymap",
		"/A/extensions/coordinate/Makefile.global"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 90.0,
		"where_history":
		[
			"",
			"A:\\uknxcl\\web\\inc",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"coordinate_object",
			"->id =",
			"free_s",
			"subset_count",
			"part_count",
			"trim",
			"free_subset",
			"free_s",
			"first)",
			"dtos",
			"itos",
			"get_partial_linestring_earth",
			"get_kml_time_aware_points",
			"get_partial_linestring_earth",
			"get_linestring_earth",
			"16 / delta",
			"_free_coordinate_object",
			"simp",
			"Duration",
			"free_subset",
			" print",
			"->timestamp",
			"graph",
			"timestamp =",
			"get_kml_styles_earth",
			"><",
			"simpl",
			"get_partial_linestring_earth",
			"simpl",
			"</",
			", set",
			"parse_igc",
			"get_task_ft",
			"get_task_tr",
			"sk_tr_earth",
			"get_task_or",
			"get_task_od",
			"get_task_generic",
			"define TSRMLS_CC",
			"track_points",
			"track_point",
			"get_time_to",
			"->alt",
			"->speed",
			"->speen",
			"->bearing",
			"->climbRate",
			"get_kml_point",
			"defined_task",
			"printf",
			"->type",
			"-type",
			"task",
			"coordinate_zval",
			"coordinate_zval_",
			"\\",
			"coordinate_object_set_section",
			"od_d",
			")",
			"(",
			"ele = ",
			"current_s",
			"length",
			"coordinate_object_set_section",
			"formatter_object",
			"formatter_kml",
			"set_graph_values",
			"json_dumps",
			"jsonp_strndup",
			"utf8_check_string",
			"hashtable_iter",
			"int32_t hashtable_seed",
			"#include \"jansson_private_config.h\"",
			"#include \"json/jansson_private_config.h\"",
			"#include \"jansson_private_config.h\"",
			"#include <jansson_private_config.h>",
			"json_t *json_object",
			"kml_formatter",
			"formatter_kml",
			"formatter_kml_object",
			"kml_formatter",
			"vstrcat",
			"score_triangle",
			"get_coordinates",
			"count",
			"free_subset",
			"->length",
			"length = ",
			"subset_count",
			"trim",
			"free_subset",
			"push_coordinate",
			"free_subset",
			"is_valid_subset",
			"push_coordinate",
			"set(",
			"coordinate =",
			"coordinte =",
			"is_valid_subset",
			"vstrcat",
			"itos",
			"fdtos",
			"fitos",
			"->od",
			"format_task_point",
			"\\\\\\n",
			"\\n",
			"\"\\0",
			"vstrcat(NULL,",
			"\"\\0\"",
			"vstrcat(\"\\0\", ",
			"get_task_od",
			"get_linestring",
			"get_task_distance",
			"free",
			"malloc",
			"free",
			"vstrcat",
			"get_coordinate_string",
			"vstrcat(",
			"vstrcat",
			"output_concat",
			"get_os_grid_ref",
			"><",
			"\\",
			"sprintf",
			"&",
			"intern"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"delta",
			"\\n</",
			"get_task_ft_earth",
			"get_task_tr_earth",
			"get_task_or_earth",
			"get_task_od_earth",
			"get_task_generic_earth",
			"coordinate_set",
			"coordinate",
			"coordinate_",
			"\\n\\",
			"",
			"formatter_split_object",
			"formatter_kml_split",
			"//#include \"jansson_private_config.h\"",
			"#include \"jansson_private_config.h\"",
			"#include \"json/jansson_private_config.h\"",
			"#include \"jansson_private_config.h\"",
			"formatter_js",
			"formatter_object",
			"formatter_kml",
			"\\\\n\\\\\\n",
			"\\\\n\\n\\\\\\\\",
			"\\\\n\\n\\\\",
			"\\\\n\\n\\",
			"\\\\n\\",
			"",
			"vstrcat(",
			"NULL",
			"vstrcat(",
			"efree",
			"vstrcat(\"\\0\",",
			">\\n<",
			"\\n\\",
			"",
			"task",
			"kml_formatter",
			"kml_formatter_methods",
			"kml_formatter_object",
			"",
			"coordinate_set_rewind",
			"->$1",
			"",
			"helmert",
			"",
			"MAP(intern, $2, $1)",
			"distances[$2][$1]",
			"_deriv",
			"Alpha",
			"Theta",
			"theta",
			"",
			" toRAD",
			"lng",
			"lat",
			"map_read",
			"read(intern, $1, $2)",
			"",
			"intern",
			"",
			"size",
			"->maximum_distance",
			"intern",
			"->distances",
			"",
			"intern",
			"",
			"lng",
			"lng toRAD",
			"lat toRAD",
			"",
			"distances",
			"j",
			"",
			"coordinate_set",
			"i",
			"coordinate",
			"intern",
			"coordinate",
			"intern->max_speed",
			"intern->max_climb_rate",
			"intern->max_alt",
			"intern->min_alt",
			"intern->min_ele",
			"intern->max_ele",
			"long",
			"return_value",
			"string",
			"parser",
			"coordinate",
			"coordinate_set",
			"clone_distance_map_object",
			"zval",
			"intern",
			"coordinate_object",
			"coordinate_set_object",
			"coordinate",
			"coordinate_set",
			"latlng",
			"uknxcl.old",
			"DEG2RAD",
			"DEG2RAD ",
			"deg2rad",
			"latlng_internal"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 5,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/A/uknxcl/web/.core/classes/kml.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6162,
						"regions":
						{
						},
						"selection":
						[
							[
								3363,
								3363
							]
						],
						"settings":
						{
							"syntax": "Packages/PHP/PHP.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1018.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "formatter/formatter_kml_earth.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 23381,
						"regions":
						{
						},
						"selection":
						[
							[
								22217,
								22217
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 8618.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "formatter/formatter_js.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7600,
						"regions":
						{
						},
						"selection":
						[
							[
								4055,
								4055
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1160.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "test/test1.igc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 43846,
						"regions":
						{
						},
						"selection":
						[
							[
								43846,
								43846
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 14182.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "bin/rebuild.sh",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 126,
						"regions":
						{
						},
						"selection":
						[
							[
								126,
								126
							]
						],
						"settings":
						{
							"syntax": "Packages/ShellScript/Shell-Unix-Generic.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "test/test.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8241,
						"regions":
						{
						},
						"selection":
						[
							[
								5061,
								5061
							]
						],
						"settings":
						{
							"syntax": "Packages/PHP/PHP.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1820.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "test/test1_earth.kml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 584559,
						"regions":
						{
						},
						"selection":
						[
							[
								214633,
								214633
							]
						],
						"settings":
						{
							"syntax": "Packages/XML/XML.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 122967.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "test/php.log",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 23338,
						"regions":
						{
						},
						"selection":
						[
							[
								17981,
								17981
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 3753.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "coordinate.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9023,
						"regions":
						{
						},
						"selection":
						[
							[
								1349,
								1349
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3355.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "coordinate_set.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 18907,
						"regions":
						{
						},
						"selection":
						[
							[
								17627,
								17644
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6873.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 10,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 24411,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										325,
										342
									],
									[
										393,
										410
									],
									[
										509,
										526
									],
									[
										552,
										569
									],
									[
										609,
										626
									],
									[
										933,
										950
									],
									[
										1091,
										1108
									],
									[
										1109,
										1126
									],
									[
										1258,
										1275
									],
									[
										1276,
										1293
									],
									[
										1389,
										1406
									],
									[
										1471,
										1488
									],
									[
										1671,
										1688
									],
									[
										1833,
										1850
									],
									[
										2052,
										2069
									],
									[
										2256,
										2273
									],
									[
										2425,
										2442
									],
									[
										2640,
										2657
									],
									[
										2820,
										2837
									],
									[
										2991,
										3008
									],
									[
										3162,
										3179
									],
									[
										3318,
										3335
									],
									[
										3408,
										3425
									],
									[
										3585,
										3602
									],
									[
										3675,
										3692
									],
									[
										3834,
										3851
									],
									[
										3859,
										3876
									],
									[
										4068,
										4085
									],
									[
										4095,
										4112
									],
									[
										4223,
										4240
									],
									[
										4248,
										4265
									],
									[
										4461,
										4478
									],
									[
										4708,
										4725
									],
									[
										4855,
										4872
									],
									[
										4898,
										4915
									],
									[
										4932,
										4949
									],
									[
										5095,
										5112
									],
									[
										5171,
										5188
									],
									[
										5189,
										5206
									],
									[
										5245,
										5262
									],
									[
										5263,
										5280
									],
									[
										5388,
										5405
									],
									[
										5415,
										5432
									],
									[
										5478,
										5495
									],
									[
										5505,
										5522
									],
									[
										5559,
										5576
									],
									[
										5586,
										5603
									],
									[
										5645,
										5662
									],
									[
										5834,
										5851
									],
									[
										6051,
										6068
									],
									[
										6069,
										6086
									],
									[
										6100,
										6117
									],
									[
										6329,
										6346
									],
									[
										6463,
										6480
									],
									[
										6659,
										6676
									],
									[
										6792,
										6809
									],
									[
										7050,
										7067
									],
									[
										7141,
										7158
									],
									[
										7335,
										7352
									],
									[
										7531,
										7548
									],
									[
										7746,
										7763
									],
									[
										8012,
										8029
									],
									[
										8274,
										8291
									],
									[
										8546,
										8563
									],
									[
										8797,
										8814
									],
									[
										8899,
										8916
									],
									[
										9185,
										9202
									],
									[
										9457,
										9474
									],
									[
										9686,
										9703
									],
									[
										9967,
										9984
									],
									[
										10117,
										10134
									],
									[
										10182,
										10199
									],
									[
										10225,
										10242
									],
									[
										10414,
										10431
									],
									[
										10574,
										10591
									],
									[
										10774,
										10791
									],
									[
										10955,
										10972
									],
									[
										11192,
										11209
									],
									[
										11387,
										11404
									],
									[
										11405,
										11422
									],
									[
										11432,
										11449
									],
									[
										11470,
										11487
									],
									[
										11620,
										11637
									],
									[
										11792,
										11809
									],
									[
										11929,
										11946
									],
									[
										12284,
										12301
									],
									[
										12632,
										12649
									],
									[
										12979,
										12996
									],
									[
										13208,
										13225
									],
									[
										13280,
										13297
									],
									[
										13474,
										13491
									],
									[
										13590,
										13607
									],
									[
										13905,
										13922
									],
									[
										14176,
										14193
									],
									[
										14400,
										14417
									],
									[
										14579,
										14596
									],
									[
										14727,
										14744
									],
									[
										14873,
										14890
									],
									[
										15239,
										15256
									],
									[
										15294,
										15311
									],
									[
										15347,
										15364
									],
									[
										15577,
										15594
									],
									[
										16024,
										16041
									],
									[
										16291,
										16308
									],
									[
										16555,
										16572
									],
									[
										16834,
										16851
									],
									[
										17113,
										17130
									],
									[
										17392,
										17409
									],
									[
										17652,
										17669
									],
									[
										17694,
										17711
									],
									[
										17872,
										17889
									],
									[
										18081,
										18098
									],
									[
										18331,
										18348
									],
									[
										18597,
										18614
									],
									[
										18661,
										18678
									],
									[
										18848,
										18865
									],
									[
										18912,
										18929
									],
									[
										19120,
										19137
									],
									[
										19327,
										19344
									],
									[
										19496,
										19513
									],
									[
										19535,
										19552
									],
									[
										19622,
										19639
									],
									[
										19661,
										19678
									],
									[
										19841,
										19858
									],
									[
										20261,
										20278
									],
									[
										20458,
										20475
									],
									[
										20618,
										20635
									],
									[
										20660,
										20677
									],
									[
										20876,
										20893
									],
									[
										21031,
										21048
									],
									[
										21378,
										21395
									],
									[
										21592,
										21609
									],
									[
										21763,
										21780
									],
									[
										21794,
										21811
									],
									[
										21978,
										21995
									],
									[
										22020,
										22037
									],
									[
										22236,
										22253
									],
									[
										22397,
										22414
									],
									[
										22650,
										22667
									],
									[
										22918,
										22935
									],
									[
										23141,
										23158
									],
									[
										23396,
										23413
									],
									[
										23654,
										23671
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								23049,
								23049
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 1,
							"result_base_dir": "",
							"result_file_regex": "^([A-Za-z\\\\/<].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 7700.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "coordinate_set.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2717,
						"regions":
						{
						},
						"selection":
						[
							[
								1464,
								1476
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 196.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "formatter/formatter_kml_earth.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 970,
						"regions":
						{
						},
						"selection":
						[
							[
								970,
								970
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "/A/uknxcl/web/inc/track/track.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15951,
						"regions":
						{
						},
						"selection":
						[
							[
								13322,
								13322
							]
						],
						"settings":
						{
							"syntax": "Packages/PHP/PHP.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4673.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 22.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"project": "geometry.sublime-project",
	"replace":
	{
		"height": 62.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
			[
				"",
				"A:\\extensions\\coordinate\\geometry.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 35.0,
		"selected_items":
		[
		],
		"width": 392.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 237.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
